int count=0;
        HashMap<Integer,Integer> map= new HashMap();
        for(int i=0;i<A.length;i++){
            A[i]= A[i]%B;
            //if(A[i]==0) count++;
            if(map.containsKey(A[i])) {map.put(A[i],map.get(A[i])+1);}
            else map.put(A[i],1);
            
        }
        for(int i=0;i<A.length;i++){
            
            if(map.containsKey(A[i])){
            //System.out.println("Hello the A[i] = "+A[i]);
                int count1=map.get(A[i]);
                 map.remove(A[i]);
                if(A[i]==0) {
                    //System.out.println("element 0 = "+ count1+" with contribution = "+fact(count1));
                    count+=fact(count1);
                    continue;
                }
                    if(A[i]==B-A[i]) {count+= fact(count1);
                        //System.out.println("element = "+A[i]+"  = "+ count1+" with contribution = "+fact(count1));
                        continue;
                    }
               if(map.containsKey(B-A[i])){
                   //System.out.println("Hello the B-A[i] = "+(B-A[i]));
                    int count2=map.get(B-A[i]);
                    map.remove(B-A[i]);
                    
                   
                    int count3 =count1*count2;
                     //System.out.println("element1= "+A[i]+" count1 = "+count1+"  element2 ="+(B-A[i])+ count2+" with contribution = "+ count3);
                    count+=count3;
                    
               
               }
                
            }
        }
        return count%1000000007;
    }
    
    public static int fact(int n){
        int count =0;
        n--;
        while(n>0){
            count+=n;
            n--;
        }
        return count%1000000007;
    }
}
    
    
    
//problem
//Given an array of integers A and an integer B, find and return the number of pairs in A whose sum is divisible by B
//A = [1, 2, 3, 4, 5]
// B = 2  //ans =4 All pairs which are divisible by 2 are (1,3), (1,5), (2,4), (3,5). 

//approach1
//bruteforce -- apply 2 loops

//approach2
//take %B of each A[i]
//create a HashMap which will hold all the numbers and their counts
// if A[i]==0 number is divisible by B so it will be = (total count-1) factorial type addition
//if(A[i]==B-A[i]) then also take (total count-1)  factorial type addition ex= B= 4, then for A[i]=2 B-A[i]=2 .lets say total 5 occurance are there of 2 then the count =4+3+2+1
//else count(A[i]) * count(B-A[i]) A[i]=1,4
//B-A[i]=3,5 then 5*4=20ways to pair them
